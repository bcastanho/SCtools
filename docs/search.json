[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Bruno Castanho Silva  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. SCtools Copyright (C) 2019 Bruno Castanho Silva This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/case-study.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SCM Case Study on Alcohol Consumption","text":"Synthetic control provides powerful approach establishing counterfactual policy changes. One example policy change Russian surrounding alcohol consumption. recent Guardian article1 chronicled fall alcohol consumption Russia based policy changes made Mr Putin’s governments. policy changes occurred roughly around 2006 included reclassifying counted “foodstuff” levying hefty taxes alcohol (Levintova 2007). Based recent trends, observers say policies desired effect. much drop alcohol consumption due policy implementation changes consumer preference?2 underlines need counterfactual. like know alcohol consumption Russia policy changes. Synthetic Control (SCtools package) can help us answer questions.","code":""},{"path":"/articles/case-study.html","id":"implementing-synthetic-controls","dir":"Articles","previous_headings":"","what":"Implementing Synthetic Controls","title":"SCM Case Study on Alcohol Consumption","text":"order understand policy impact Russian Alcohol Consumption, first load SCtools, Synth, tidyverse packages. loaded, can look alcohol data inside SCtools package. can build graphic Guardian using data see trend alcohol consumption. Trend Alcohol Consumption Russia can also examine trends predictors. Trends Predictors Russian Federation One feature SCM selecting donor states. donor states help us generate synthetic control (synthetic version Russian absence policy change). several key assumptions regarding choosing donor states including spillover effects (e.g. policy change Russia cause huge migration drinkers another country, change trade patterns, etc) Donor states enact similar policies absence evidence changes states, can look potential donor states graphically: Review Possible Donors look potential donors see usual suspects: France, United States, well neighbouring Baltic states. makes intuitive sense. Baltic states share similar cultural habits. SCM insensitive donors neighbouring, allow us include countries like Great Britain United States donor pool.3","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(SCtools) #> Loading required package: future library(Synth) #> ## #> ## Synth Package: Implements Synthetic Control Methods. #> ## See http://www.mit.edu/~jhainm/software.htm for additional information. theme_set(theme_minimal()) alcohol %>%    filter(country_name == \"Russian Federation\") %>%      ggplot(aes(year, consumption))+     geom_line()+     geom_vline(xintercept = 2006, color  = \"orange\")+     labs(         title = \"Per Capita Alcohol Consumption in the Russian Federation Since 1990\",         subtitle = \"The Russian government began a series of policy changes in 2003\\nto reduce alcohol consumption\",         y = \"Per Capita Consumption (L/person)\",         x = NULL,         caption = \"Data: World Health Organization\"     ) alcohol %>%    filter(country_name == \"Russian Federation\") %>%      select(year, consumption,labor_force_participation_rate:manufacturing) %>%      tidyr::gather(predictor, value, -year) %>%      ggplot(aes(year, value))+     geom_line()+         facet_wrap(~predictor, scales = \"free\") p1 <- alcohol %>%      mutate(my_color = ifelse(country_code == \"RUS\", \"Russia\", \"Other\")) %>%      ggplot(aes(year, consumption, group = country_code, color = my_color))+     geom_line() +     scale_color_manual(values = c(\"grey\", \"black\", \"white\"))+     ylim(5,15)+     xlim(1990,2005) p1 #> Warning: Removed 3579 row(s) containing missing values (geom_path)."},{"path":"/articles/case-study.html","id":"experimental-design","dir":"Articles","previous_headings":"Implementing Synthetic Controls","what":"Experimental Design","title":"SCM Case Study on Alcohol Consumption","text":"Now idea donors, can build pool. Now use dataprep function Synth format data. missing values, ok. Now run synth function generate synthetic controls. running SCM, can look weights donors see see anything surprising.  Unsurprisingly, can see Kazakstan Lithuania contribute counterfactual Russia, however, interestingly Great Britain Chzech Republic amongst top donors counterfactual. highlights one powerful features Synthetic Control - donors need geographically connected, Let’s continue analysis. Now can plot real Russia vs Synthetic Russia using plot.path function Synth. see synthetic control matches 2000-2005 fairly well (specified optimize), opportunity closely match actual Russia. Synthetic Russia vs Actual Russia Alcohol Consumption per Capita can also look delta real synthetic Russia. Difference Alcohol Consumption Synthetic Actual Russia appears policy took take effect, decrease alcohol consumed per capita beginning 2014. However, must mentioned isn’t “40%” Guardian reports one may glean graph first glance.","code":"comparison_states <- c(\"USA\", \"UK\", \"UKR\", \"KAZ\",                                              \"GBR\", \"ESP\", \"DEU\", \"POL\",                                              \"FIN\", \"FRA\", \"GRC\", \"IRL\",                                              \"LTU\", \"ROU\", \"GEO\", \"MDA\",                                              \"SWE\", \"BEL\", \"BLR\", \"KGZ\",                                              \"CZE\", \"MEX\", \"SVN\")  control_ids <- alcohol %>%      select(country_code,country_num) %>%      filter(country_code %in% comparison_states) %>%      distinct() %>%      pull(country_num) dataprep.out<-dataprep(         foo = as.data.frame(alcohol),         predictors = c(\"labor_force_participation_rate\",                        \"inflation\",                        \"mobile_cellular_subscriptions\",                        \"manufacturing\"),         predictors.op = \"mean\",         dependent = \"consumption\",         unit.variable = \"country_num\",         time.variable = \"year\",         treatment.identifier = 142,         controls.identifier = control_ids,         time.predictors.prior = c(1991:2005),         time.optimize.ssr = c(2000:2005),         special.predictors = list(       list(\"consumption\", 2000:2005 ,\"mean\")),         unit.names.variable = \"country_code\",         time.plot = 1992:2015     ) #>  #>  Missing data- treated unit; predictor: inflation ; for period: 1991  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: inflation ; for period: 1992  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1991  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1992  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1993  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1994  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1995  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1996  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1997  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1998  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 1999  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 2000  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data- treated unit; predictor: manufacturing ; for period: 2001  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data - control unit: 16 ; predictor: inflation ; for period: 1991  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. #>  #>  Missing data - control unit: 16 ; predictor: inflation ; for period: 1992  #>  We ignore (na.rm = TRUE) all missing values for predictors.op. out <- synth(dataprep.out, Sigf.ipop = 3) solution <- out$solution.w %>%      as.data.frame()  solution$country_num <- rownames(solution)  solution %>%      mutate(country_num = as.numeric(country_num)) %>%      left_join(alcohol %>%      select(country_code,country_num) %>%      filter(country_code %in% comparison_states) %>%          distinct(), by = \"country_num\") %>%      ggplot(aes(reorder(country_code, w.weight), w.weight))+     geom_col()+     coord_flip()+     labs(         title = \"Donor Weights by Country\",         y = NULL,         x = \"Weight\"     ) path.plot(synth.res = out, dataprep.res = dataprep.out,                      Xlab = \"per Capita Alcohol Consumption\", ) delta_out <- (dataprep.out$Y1plot - (dataprep.out$Y0plot %*% out$solution.w)) %>%      as.data.frame()  delta_out$year <- rownames(delta_out)  delta_out%>%      knitr::kable(caption = \"Difference in Alcohol Consumption Between Synthetic and Actual Russia\", digits = 2)"},{"path":"/articles/case-study.html","id":"the-next-steps","dir":"Articles","previous_headings":"","what":"The Next Steps","title":"SCM Case Study on Alcohol Consumption","text":"next steps SCM controls analysis permute data set understand sensitivity Synthetic controls assess results observed plausible (e.g. results obtained due chance, reflect true effect). SCtools provides generate.placebos function automate process. includes option parallelise operation (greatly speeds processing time). Now placebo object, can represent graphically plot_placebos. can see donors (control unit) actual treated group. Placebo Plot Control Units Equally important can test Mean Squared Prediction Error (MSPE). Additionally, generated controls placebos, can see extreme values thus generate pseudo p-value see results significant. Now, mentioned test relatively underpowered looks donor states. look single number summary, can look plot? mspe.plot can visualise ratios MSPE donor. see little difference Russia, supports higher p-value. Mean Squared Prediction Error Ratios Russia Donors","code":"placebo <- generate.placebos(dataprep.out = dataprep.out,                              synth.out = out, strategy = \"multiprocess\") plot_placebos(placebo) test_out <- mspe.test(placebo) test_out$p.val #> [1] 0.6521739 mspe.plot(tdf = placebo)"},{"path":"/articles/case-study.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"SCM Case Study on Alcohol Consumption","text":"case study, doesn’t look like policy impact. However, brings question model specification. predictors model necessarily generate best pre-treatment MSPE. Different predictors may help us better construct Synthetic Russia. Additionally, model tuned including lagged predictors. won’t go details regarding process, SCtools, now tools help model inference tuning.","code":""},{"path":"/articles/replicating-basque.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Replicating the Basque Study","text":"order demonstrate SCtools useful start replication cannonical Basque study Abadie Gardeazabal (2003). Now can load basque data set. per normal Synth workflow, need reformat data using dataprep function specify counterfactuals response variables. Now, can run SCM algorithm using synth function. Synth provides additional helper functions extract information outputted object including ability analyze outputs: generate plots counterfactual:","code":"library(SCtools) #> Loading required package: future library(Synth) #> ## #> ## Synth Package: Implements Synthetic Control Methods. #> ## See http://www.mit.edu/~jhainm/software.htm for additional information. data(\"basque\") dataprep.out <- dataprep(   foo = basque,   predictors = c(\"school.illit\", \"school.prim\", \"school.med\",     \"school.high\", \"school.post.high\", \"invest\"),   predictors.op = \"mean\",   time.predictors.prior = 1964:1969,   special.predictors = list(     list(\"gdpcap\", 1960:1969 ,\"mean\"),     list(\"sec.agriculture\", seq(1961, 1969, 2), \"mean\"),     list(\"sec.energy\", seq(1961, 1969, 2), \"mean\"),     list(\"sec.industry\", seq(1961, 1969, 2), \"mean\"),     list(\"sec.construction\", seq(1961, 1969, 2), \"mean\"),     list(\"sec.services.venta\", seq(1961, 1969, 2), \"mean\"),     list(\"sec.services.nonventa\", seq(1961, 1969, 2), \"mean\"),     list(\"popdens\",               1969,               \"mean\")),   dependent = \"gdpcap\",   unit.variable = \"regionno\",   unit.names.variable = \"regionname\",   time.variable = \"year\",   treatment.identifier = 17,   controls.identifier = c(2:16, 18),   time.optimize.ssr = 1960:1969,   time.plot = 1955:1997) synth.out <- synth(data.prep.obj = dataprep.out, method = \"BFGS\") gaps <- dataprep.out$Y1plot - (dataprep.out$Y0plot %*% synth.out$solution.w) path.plot(synth.res = synth.out, dataprep.res = dataprep.out,           Ylab = \"real per-capita GDP (1986 USD, thousand)\", Xlab = \"year\",           Ylim = c(0, 12), Legend = c(\"Basque country\",                                       \"synthetic Basque country\"),            Legend.position = \"bottomright\")"},{"path":"/articles/replicating-basque.html","id":"extending-the-analysis","dir":"Articles","previous_headings":"","what":"Extending the Analysis","title":"Replicating the Basque Study","text":"point, SCtools extends analysis Synth, Synth generates analysis one configured dataset, SCtools provides tooling permute dataset generate multiple placebos test sensitivity SCM output. can use plot_placebos run placebo test findings Abadie Gardeazabal (2003).  Finally, can also run mspe_plot function run post/pre MPSE test case, find unlikely find chance effects identified.","code":"placebo <- generate.placebos(dataprep.out = dataprep.out,                              synth.out = synth.out, strategy = \"multiprocess\") plot_placebos(placebo) mspe_plot(placebo)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bruno Castanho Silva. Author, maintainer. Michael DeWitt. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castanho Silva B, DeWitt M (2022). SCtools: Extensions Synthetic Controls Analysis. R package version 0.3.2.","code":"@Manual{,   title = {SCtools: Extensions for Synthetic Controls Analysis},   author = {Bruno {Castanho Silva} and Michael DeWitt},   year = {2022},   note = {R package version 0.3.2}, }"},{"path":"/index.html","id":"sctools-","dir":"","previous_headings":"","what":"Extensions for Synthetic Controls Analysis","title":"Extensions for Synthetic Controls Analysis","text":"package work progress compiling functions make easier running placebo space tests synthetic control models SCM multiple treated units. relies heavily ‘Synth’ package. can install CRAN : can install ‘devtools’. ‘remotes’ package Please note ‘SCtools’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":"install.packages(\"SCtools\") library(devtools)  install_github(\"bcastanho/SCtools\") library(remotes) install_github(\"bcastanho/SCtools\")"},{"path":"/reference/SCtools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SCTools: Tools for Synthetic Control Methods — SCtools-package","title":"SCTools: Tools for Synthetic Control Methods — SCtools-package","text":"set functions extend synthetic controls analyses  performed package 'Synth'. Includes generating plotting placebos,  significance tests plots, calculating average treatment effects  multiple treated units.","code":""},{"path":"/reference/SCtools-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SCTools: Tools for Synthetic Control Methods — SCtools-package","text":"several goals: Allow easy generation placebos Generate figures inference SCM outputs Extend existing Synth package","code":""},{"path":[]},{"path":"/reference/SCtools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SCTools: Tools for Synthetic Control Methods — SCtools-package","text":"Maintainer: Bruno Castanho Silva bcsilva@wiso.uni-koeln.de (ORCID) Authors: Michael DeWitt .dewitt.jr@gmail.com (ORCID)","code":""},{"path":"/reference/alcohol.html","id":null,"dir":"Reference","previous_headings":"","what":"World Alcohol per Capita Consumption — alcohol","title":"World Alcohol per Capita Consumption — alcohol","text":"data set compiled data World Health Organization () World Bank (WB). primary purpose investigate effects policy changes Russian Federation enacted 2003 around alcohol consumption. excellent case study SCM  approaches used. can read policy changes https://www.theguardian.com/world/2019/oct/01/russian-alcohol-consumption--40-since-2003-","code":""},{"path":"/reference/alcohol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"World Alcohol per Capita Consumption — alcohol","text":"","code":"alcohol"},{"path":"/reference/alcohol.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"World Alcohol per Capita Consumption — alcohol","text":"data.frame 5107 rows 8 columns: country_name name country year year consumption Alcohol consumption per capita (liters/person); types country_code Three letter country code labor_force_participation_rate Labor force participation rate, total (percent total population ages 15+) mobile_cellular_subscriptions Mobile cellular subscriptions (per 100 people) inflation Inflation, consumer prices (annual percent) manufacturing Manufacturing, value added (percent GDP) country_num country number","code":""},{"path":"/reference/alcohol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"World Alcohol per Capita Consumption — alcohol","text":"data available https://apps..int/gho/data/node.main.A1039?lang=en. WB data available https://data.worldbank.org/.","code":""},{"path":"/reference/generate.placebos.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate placebo synthetic controls — generate.placebos","title":"Function to generate placebo synthetic controls — generate.placebos","text":"Constructs synthetic control unit unit     donor pool implementation synthetic control method     single treated unit. Used placebo tests (see plot_placebos,     mspe.test, mspe.plot) assess strength     significance causal inference based synthetic control method.     placebo tests, see Abadie Gardeazabal (2003), Abadie, Diamond,     Hainmueller (2010, 2011, 2014).","code":""},{"path":"/reference/generate.placebos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate placebo synthetic controls — generate.placebos","text":"","code":"generate.placebos(   dataprep.out,   synth.out,   Sigf.ipop = 5,   strategy = \"sequential\" )  generate_placebos(   dataprep.out,   synth.out,   Sigf.ipop = 5,   strategy = \"sequential\" )"},{"path":"/reference/generate.placebos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate placebo synthetic controls — generate.placebos","text":"dataprep.data.prep object produced dataprep command synth.synth.object produced synth command Sigf.ipop Precision setting ipop optimization routine.  Default 5. strategy processing method wish use  \"sequential\" \"multiprocess\". Use \"multiprocess\" parallelize operations  reduce computing time. Default sequential.","code":""},{"path":"/reference/generate.placebos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to generate placebo synthetic controls — generate.placebos","text":"df Data frame outcome data control unit     respective synthetic control original treated control mspe.placs Mean squared prediction error pretreatment     period placebo t0 First time unit time.optimize.ssr t1 First time unit highest value time.optimize.ssr tr Unit number treated unit names..numbers Dataframe two columns showing unit     numbers names control units n Number control units treated.name Unit name treated unit loss.v Pretreatment MSPE treated unit's synthetic control","code":""},{"path":"/reference/generate.placebos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to generate placebo synthetic controls — generate.placebos","text":"","code":"## Example with toy data from Synth library(Synth) #> ## #> ## Synth Package: Implements Synthetic Control Methods. #> ## See http://www.mit.edu/~jhainm/software.htm for additional information. #>  # Load the simulated data data(synth.data)  # Execute dataprep to produce the necessary matrices for synth dataprep.out<-   dataprep(     foo = synth.data,     predictors = c(\"X1\"),     predictors.op = \"mean\",     dependent = \"Y\",     unit.variable = \"unit.num\",     time.variable = \"year\",     special.predictors = list(       list(\"Y\", 1991, \"mean\")     ),     treatment.identifier = 7,     controls.identifier = c(29, 2, 17),     time.predictors.prior = c(1984:1989),     time.optimize.ssr = c(1984:1990),     unit.names.variable = \"name\",     time.plot = 1984:1996 )  # run the synth command to create the synthetic control synth.out <- synth(dataprep.out, Sigf.ipop=1) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 31.03738  #>  #> solution.v: #>  0.2058833 0.7941167  #>  #> solution.w: #>  0.3616606 0.3220655 0.3147483  #>   tdf <- generate.placebos(dataprep.out,synth.out, Sigf.ipop = 1) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 25.21919  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.5127917 0.49214  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 212.8446  #>  #> solution.v: #>  0.99648 0.003519969  #>  #> solution.w: #>  0.4851494 0.5144103  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 94.81057  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.5059424 0.5518736  #>  #> New names: #> • `w.weight` -> `w.weight...1` #> • `w.weight` -> `w.weight...2` #> • `w.weight` -> `w.weight...3`  if (FALSE) ## Example with toy data from Synth library(Synth) # Load the simulated data data(synth.data)  # Execute dataprep to produce the necessary matrices for synth dataprep.out<-   dataprep(     foo = synth.data,     predictors = c(\"X1\"),     predictors.op = \"mean\",     dependent = \"Y\",     unit.variable = \"unit.num\",     time.variable = \"year\",     special.predictors = list(       list(\"Y\", 1991, \"mean\")     ),     treatment.identifier = 7,     controls.identifier = c(29, 2, 13, 17),     time.predictors.prior = c(1984:1989),     time.optimize.ssr = c(1984:1990),     unit.names.variable = \"name\",     time.plot = 1984:1996 )  # run the synth command to create the synthetic control synth.out <- synth(dataprep.out, Sigf.ipop=2) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 19.33618  #>  #> solution.v: #>  0 1  #>  #> solution.w: #>  0.2559408 0.1232918 0.3053249 0.315439  #>   ## run the generate.placebos command to reassign treatment status ## to each unit listed as control, one at a time, and generate their ## synthetic versions. Sigf.ipop = 2 for faster computing time.  ## Increase to the default of 5 for better estimates.  tdf <- generate.placebos(dataprep.out,synth.out, Sigf.ipop = 2) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 89.19944  #>  #> solution.v: #>  0.02942986 0.9705701  #>  #> solution.w: #>  0.2112062 0.4493425 0.3394498  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 3209.434  #>  #> solution.v: #>  0 1  #>  #> solution.w: #>  0.9858452 0.00739644 0.006758148  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 357.7047  #>  #> solution.v: #>  8.2e-09 1  #>  #> solution.w: #>  0.1678859 0.03788081 0.7942333  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 91.49109  #>  #> solution.v: #>  0.6683888 0.3316112  #>  #> solution.w: #>  0.1545103 0.2152758 0.6299727  #>  #> New names: #> • `w.weight` -> `w.weight...1` #> • `w.weight` -> `w.weight...2` #> • `w.weight` -> `w.weight...3` #> • `w.weight` -> `w.weight...4`"},{"path":"/reference/is_tdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a tdf object — is_tdf","title":"Test if the object is a tdf object — is_tdf","text":"function returns `TRUE` object returned  generate.placebos function. `FALSE` objects, including regular data frames.","code":""},{"path":"/reference/is_tdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a tdf object — is_tdf","text":"","code":"is_tdf(x)"},{"path":"/reference/is_tdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a tdf object — is_tdf","text":"x object","code":""},{"path":"/reference/is_tdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a tdf object — is_tdf","text":"`TRUE` object inherits `tdf` class.","code":""},{"path":"/reference/is_tdf_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a tdf_multi object — is_tdf_multi","title":"Test if the object is a tdf_multi object — is_tdf_multi","text":"function returns `TRUE` object returned  multiple.synth function. `FALSE` objects, including regular data frames.","code":""},{"path":"/reference/is_tdf_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a tdf_multi object — is_tdf_multi","text":"","code":"is_tdf_multi(x)"},{"path":"/reference/is_tdf_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a tdf_multi object — is_tdf_multi","text":"x object","code":""},{"path":"/reference/is_tdf_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a tdf_multi object — is_tdf_multi","text":"`TRUE` object inherits `tdf_multi` class.","code":""},{"path":"/reference/mspe.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the post/pre-treatment MSPE ratio — mspe.plot","title":"Plot the post/pre-treatment MSPE ratio — mspe.plot","text":"Plots post/pre-treatment mean square prediction error ratio      treated unit placebos.","code":""},{"path":"/reference/mspe.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the post/pre-treatment MSPE ratio — mspe.plot","text":"","code":"mspe.plot(   tdf,   discard.extreme = FALSE,   mspe.limit = 20,   plot.hist = FALSE,   title = NULL,   xlab = \"Post/Pre MSPE ratio\",   ylab = NULL )  mspe_plot(   tdf,   discard.extreme = FALSE,   mspe.limit = 20,   plot.hist = FALSE,   title = NULL,   xlab = \"Post/Pre MSPE ratio\",   ylab = NULL )"},{"path":"/reference/mspe.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the post/pre-treatment MSPE ratio — mspe.plot","text":"tdf object constructed generate.placebos. discard.extreme Logical. Whether placebos high  pre-treatement MSPE excluded plot. mspe.limit Numerical. Used discard.extreme TRUE.  indicates many times pretreatment MSPE placebo  higher treated unit considered extreme  discarded. Default 20. plot.hist Logical. FALSE, dotplot unit name  post/pre treatment MSPE ratio produced. TRUE,  histogram produced, frequency ratio.  set TRUE many controls, make  visualization easier. title Character. Optional. Title plot. xlab Character. Optional. Label x axis. ylab Character. Optional. Label y axis.","code":""},{"path":"/reference/mspe.plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the post/pre-treatment MSPE ratio — mspe.plot","text":"Post/pre-treatement mean square prediction error ratio      difference observed outcome unit synthetic      control, treatement. higher ratio means small      pretreatment prediction error (good synthetic control), high      post-treatment MSPE, meaning large difference unit      synthetic control intervention. calculating ratio      placebos, test can interpreted looking likely      result obtained single treated case synthetic control      analysis occurred chance given treatement.      detailed description, see Abadie, Diamond, Hainmueller (2011, 2014).","code":""},{"path":"/reference/mspe.plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot the post/pre-treatment MSPE ratio — mspe.plot","text":"Abadie, ., Diamond, ., Hainmueller, J. (2014).    Comparative Politics Synthetic Control Method.    American Journal Political Science Forthcoming 2014. Synthetic : R Package Synthetic Control Methods Comparative     Case Studies. Journal Statistical Software 42 (13) 1–17. Abadie, ., Diamond, ., Hainmueller, J. (2011). Synth: R Package     Synthetic Control Methods Comparative Case Studies.     Journal Statistical Software 42 (13) 1–17. Abadie , Diamond , Hainmueller J (2010). Synthetic Control Methods     Comparative Case Studies: Estimating Effect California's Tobacco     Control Program. Journal American Statistical Association     105 (490) 493–505.","code":""},{"path":[]},{"path":"/reference/mspe.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the post/pre-treatment MSPE ratio — mspe.plot","text":"","code":"## Example with toy data from Synth library(Synth) # Load the simulated data data(synth.data)  # Execute dataprep to produce the necessary matrices for synth dataprep.out<-   dataprep(     foo = synth.data,     predictors = c(\"X1\"),     predictors.op = \"mean\",     dependent = \"Y\",     unit.variable = \"unit.num\",     time.variable = \"year\",     special.predictors = list(       list(\"Y\", 1991, \"mean\")     ),     treatment.identifier = 7,     controls.identifier = c(29, 2, 17),     time.predictors.prior = c(1984:1989),     time.optimize.ssr = c(1984:1990),     unit.names.variable = \"name\",     time.plot = 1984:1996 )  # run the synth command to create the synthetic control synth.out <- synth(dataprep.out, Sigf.ipop=1) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 31.03738  #>  #> solution.v: #>  0.2058833 0.7941167  #>  #> solution.w: #>  0.3616606 0.3220655 0.3147483  #>   tdf <- generate.placebos(dataprep.out,synth.out, Sigf.ipop = 1) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 25.21919  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.5127917 0.49214  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 212.8446  #>  #> solution.v: #>  0.99648 0.003519969  #>  #> solution.w: #>  0.4851494 0.5144103  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 94.81057  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.5059424 0.5518736  #>  #> New names: #> • `w.weight` -> `w.weight...1` #> • `w.weight` -> `w.weight...2` #> • `w.weight` -> `w.weight...3` ## Test how extreme was the observed treatment effect given the placebos: ratio <- mspe.test(tdf) ratio$p.val #> [1] 0.25  mspe.plot(tdf, discard.extreme = FALSE)   if (FALSE) ## Example with toy data from 'Synth' library(Synth) # Load the simulated data data(synth.data)  # Execute dataprep to produce the necessary matrices for 'Synth' dataprep.out<-   dataprep(     foo = synth.data,     predictors = c(\"X1\"),     predictors.op = \"mean\",     dependent = \"Y\",     unit.variable = \"unit.num\",     time.variable = \"year\",     special.predictors = list(       list(\"Y\", 1991, \"mean\")     ),     treatment.identifier = 7,     controls.identifier = c(29, 2, 13, 17),     time.predictors.prior = c(1984:1989),     time.optimize.ssr = c(1984:1990),     unit.names.variable = \"name\",     time.plot = 1984:1996 )  # run the synth command to create the synthetic control synth.out <- synth(dataprep.out, Sigf.ipop=2) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 19.33618  #>  #> solution.v: #>  0 1  #>  #> solution.w: #>  0.2559408 0.1232918 0.3053249 0.315439  #>   ## run the generate.placebos command to reassign treatment status ## to each unit listed as control, one at a time, and generate their ## synthetic versions. Sigf.ipop = 2 for faster computing time.  ## Increase to the default of 5 for better estimates.  tdf <- generate.placebos(dataprep.out,synth.out, Sigf.ipop = 2) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 89.19944  #>  #> solution.v: #>  0.02942986 0.9705701  #>  #> solution.w: #>  0.2112062 0.4493425 0.3394498  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 3209.434  #>  #> solution.v: #>  0 1  #>  #> solution.w: #>  0.9858452 0.00739644 0.006758148  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 357.7047  #>  #> solution.v: #>  8.2e-09 1  #>  #> solution.w: #>  0.1678859 0.03788081 0.7942333  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 91.49109  #>  #> solution.v: #>  0.6683888 0.3316112  #>  #> solution.w: #>  0.1545103 0.2152758 0.6299727  #>  #> New names: #> • `w.weight` -> `w.weight...1` #> • `w.weight` -> `w.weight...2` #> • `w.weight` -> `w.weight...3` #> • `w.weight` -> `w.weight...4`  ## Test how extreme was the observed treatment effect given the placebos: ratio <- mspe.test(tdf) ratio$p.val #> [1] 0.2  mspe.plot(tdf, discard.extreme = FALSE)"},{"path":"/reference/mspe.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute the post/pre treatment MSPE ratio for the \n    treated unit and placebos — mspe.test","title":"Function to compute the post/pre treatment MSPE ratio for the \n    treated unit and placebos — mspe.test","text":"Computes post/pre treatement mean square prediction error     ratio treated unit synthetic control analysis placebos     produced generate.placebos. Returns matrix     ratios p-value extreme treated unit's ratio     comparison placebos. Equivalent significance testing     synthetic controls result.","code":""},{"path":"/reference/mspe.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute the post/pre treatment MSPE ratio for the \n    treated unit and placebos — mspe.test","text":"","code":"mspe.test(tdf, discard.extreme = FALSE, mspe.limit = 20)  mspe_test(tdf, discard.extreme = FALSE, mspe.limit = 20)"},{"path":"/reference/mspe.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute the post/pre treatment MSPE ratio for the \n    treated unit and placebos — mspe.test","text":"tdf object constructed generate.placebos discard.extreme Logical. Whether placebos high  pre-treatement MSPE excluded count significance  testing. mspe.limit Numerical. Used discard.extreme TRUE.  indicates many times pretreatment MSPE placebo  higher treated unit considered extreme  discarded. Default 20.","code":""},{"path":"/reference/mspe.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compute the post/pre treatment MSPE ratio for the \n    treated unit and placebos — mspe.test","text":"p.val p-value treated unit post/pre MSPE ratio.     proportion units (placebos treated) ratio     equal higher treated unit test Dataframe two columns. first post/pre MSPE     ratio unit. second indicates unit names","code":""},{"path":"/reference/mspe.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to compute the post/pre treatment MSPE ratio for the \n    treated unit and placebos — mspe.test","text":"Post/pre-treatement mean square prediction error ratio     difference observed outcome unit synthetic     control, treatement. higher ratio means small     pre-treatment prediction error (good synthetic control),     high post-treatment MSPE, meaning large difference unit     synthetic control intervention.     calculating ratio placebos, test can interpreted     looking likely result obtained single treated case     synthetic control analysis occurred chance given     treatement. detailed description, see Abadie, Diamond,     Hainmueller (2011, 2014).","code":""},{"path":[]},{"path":"/reference/mspe.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compute the post/pre treatment MSPE ratio for the \n    treated unit and placebos — mspe.test","text":"","code":"## Example with toy data from Synth library(Synth) # Load the simulated data data(synth.data)  # Execute dataprep to produce the necessary matrices for synth dataprep.out<-   dataprep(     foo = synth.data,     predictors = c(\"X1\"),     predictors.op = \"mean\",     dependent = \"Y\",     unit.variable = \"unit.num\",     time.variable = \"year\",     special.predictors = list(       list(\"Y\", 1991, \"mean\")     ),     treatment.identifier = 7,     controls.identifier = c(29, 2, 17),     time.predictors.prior = c(1984:1989),     time.optimize.ssr = c(1984:1990),     unit.names.variable = \"name\",     time.plot = 1984:1996 )  # run the synth command to create the synthetic control synth.out <- synth(dataprep.out, Sigf.ipop=1) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 31.03738  #>  #> solution.v: #>  0.2058833 0.7941167  #>  #> solution.w: #>  0.3616606 0.3220655 0.3147483  #>   tdf <- generate.placebos(dataprep.out,synth.out, Sigf.ipop = 1) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 25.21919  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.5127917 0.49214  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 212.8446  #>  #> solution.v: #>  0.99648 0.003519969  #>  #> solution.w: #>  0.4851494 0.5144103  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 94.81057  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.5059424 0.5518736  #>  #> New names: #> • `w.weight` -> `w.weight...1` #> • `w.weight` -> `w.weight...2` #> • `w.weight` -> `w.weight...3` ## Test how extreme was the observed treatment effect given the placebos: ratio <- mspe.test(tdf) ratio$p.val #> [1] 0.25  mspe.plot(tdf, discard.extreme = FALSE)   if (FALSE) ## Example with toy data from 'Synth' library(Synth) # Load the simulated data data(synth.data)  # Execute dataprep to produce the necessary matrices for 'Synth' dataprep.out<-   dataprep(     foo = synth.data,     predictors = c(\"X1\"),     predictors.op = \"mean\",     dependent = \"Y\",     unit.variable = \"unit.num\",     time.variable = \"year\",     special.predictors = list(       list(\"Y\", 1991, \"mean\")     ),     treatment.identifier = 7,     controls.identifier = c(29, 2, 13, 17),     time.predictors.prior = c(1984:1989),     time.optimize.ssr = c(1984:1990),     unit.names.variable = \"name\",     time.plot = 1984:1996 )  # run the synth command to create the synthetic control synth.out <- synth(dataprep.out, Sigf.ipop=2) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 19.33618  #>  #> solution.v: #>  0 1  #>  #> solution.w: #>  0.2559408 0.1232918 0.3053249 0.315439  #>   ## run the generate.placebos command to reassign treatment status ## to each unit listed as control, one at a time, and generate their ## synthetic versions. Sigf.ipop = 2 for faster computing time.  ## Increase to the default of 5 for better estimates.  tdf <- generate.placebos(dataprep.out,synth.out, Sigf.ipop = 2) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 89.19944  #>  #> solution.v: #>  0.02942986 0.9705701  #>  #> solution.w: #>  0.2112062 0.4493425 0.3394498  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 3209.434  #>  #> solution.v: #>  0 1  #>  #> solution.w: #>  0.9858452 0.00739644 0.006758148  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 357.7047  #>  #> solution.v: #>  8.2e-09 1  #>  #> solution.w: #>  0.1678859 0.03788081 0.7942333  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 91.49109  #>  #> solution.v: #>  0.6683888 0.3316112  #>  #> solution.w: #>  0.1545103 0.2152758 0.6299727  #>  #> New names: #> • `w.weight` -> `w.weight...1` #> • `w.weight` -> `w.weight...2` #> • `w.weight` -> `w.weight...3` #> • `w.weight` -> `w.weight...4`  ## Test how extreme was the observed treatment effect given the placebos: ratio <- mspe.test(tdf) ratio$p.val #> [1] 0.2  mspe.plot(tdf, discard.extreme = FALSE)"},{"path":"/reference/multiple.synth.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Apply Synthetic Controls to Multiple Treated Units — multiple.synth","title":"Function to Apply Synthetic Controls to Multiple Treated Units — multiple.synth","text":"Generates one synthetic control treated unit calculates     difference treated synthetic control .     Returns vector outcome values synthetic controls,     plot average treatment effects, required generates placebos     donor pool used conjunction plac.dist.     arguments used dataprep Synth    package, except treated.units, treatment.time,     generate.placebos.","code":""},{"path":"/reference/multiple.synth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Apply Synthetic Controls to Multiple Treated Units — multiple.synth","text":"","code":"multiple.synth(   foo,   predictors,   predictors.op,   dependent,   unit.variable,   time.variable,   special.predictors,   treated.units,   control.units,   time.predictors.prior,   time.optimize.ssr,   unit.names.variable,   time.plot,   treatment.time,   gen.placebos = FALSE,   strategy = \"sequential\",   Sigf.ipop = 5 )  multiple_synth(   foo,   predictors,   predictors.op,   dependent,   unit.variable,   time.variable,   special.predictors,   treated.units,   control.units,   time.predictors.prior,   time.optimize.ssr,   unit.names.variable,   time.plot,   treatment.time,   gen.placebos = FALSE,   strategy = \"sequential\",   Sigf.ipop = 5 )"},{"path":"/reference/multiple.synth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Apply Synthetic Controls to Multiple Treated Units — multiple.synth","text":"foo Dataframe panel data. predictors Vector column numbers column-name character strings  identifies predictors' columns. predictors numeric. predictors.op character string identifying method (operator)  used predictors. Default mean. dependent column number string column name  corresponds dependent variable. unit.variable column number string column name  identifies unit numbers. variable must numeric. time.variable column number string column name  identifies period (time) data. variable must numeric. special.predictors list object identifying additional predictors  pre-treatment years operators. treated.units vector identifying unit.variable numbers  treated units. control.units vector identifying unit.variable numbers  control units. time.predictors.prior numeric vector identifying pretreatment  periods values outcome predictors averaged. time.optimize.ssr numeric vector identifying periods  dependent variable loss function minimized  treated unit synthetic control. unit.names.variable column number string column name  identifying variable units' names. variable must character. time.plot vector identifying periods results  plotted path.plot treatment.time numeric value value time.variable marks intervention. gen.placebos Logical. Whether placebo (synthetic control)  unit donor pool constructed. increase  computation time. strategy processing method wish use  \"sequential\" \"multiprocess\". Use \"multiprocess\" parallelize operations  reduce computing time. Default sequential. Sigf.ipop Precision setting ipop optimization routine.  Default 5.","code":""},{"path":"/reference/multiple.synth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Apply Synthetic Controls to Multiple Treated Units — multiple.synth","text":"Data frame. column contains outcome values every  time-point one unit synthetic control. last column contains  time-points.","code":""},{"path":"/reference/multiple.synth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to Apply Synthetic Controls to Multiple Treated Units — multiple.synth","text":"function runs dataprep synth     unit identified treated.units. saves vector     predicted values synthetic control, used estimating     average treatment effects applications Synthetic Controls     multiple treated units. details arguments, see documentation     Synth.","code":""},{"path":"/reference/multiple.synth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to Apply Synthetic Controls to Multiple Treated Units — multiple.synth","text":"","code":"## Using the toy data from 'Synth':  library(Synth) data(synth.data) set.seed(42)  multi <- multiple.synth(foo = synth.data,                        predictors = c(\"X1\"),                        predictors.op = \"mean\",                        dependent = \"Y\",                        unit.variable = \"unit.num\",                        time.variable = \"year\",                        treatment.time = 1990,                        special.predictors = list(                          list(\"Y\", 1991, \"mean\")                        ),                        treated.units = c(2,7),                        control.units = c(29, 13, 17),                        time.predictors.prior = c(1984:1989),                        time.optimize.ssr = c(1984:1990),                        unit.names.variable = \"name\",                        time.plot = 1984:1996, gen.placebos =  FALSE,                         Sigf.ipop = 2) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 5.60058  #>  #> solution.v: #>  0.0001064523 0.9998935  #>  #> solution.w: #>  0.1728629 0.8270615 7.56699e-05  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 80.81988  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.002266006 0.004655154 0.9930788  #>  ## Plot with the average path of the treated units and the average of their ## respective synthetic controls:  multi$p"},{"path":"/reference/plac.dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the distribution of placebo samples for synthetic control \n    analysis with multiple treated units. — plac.dist","title":"Plot the distribution of placebo samples for synthetic control \n    analysis with multiple treated units. — plac.dist","text":"Takes output object multiple.synth creates      distribution placebo average treatment effects, test      significance observed ATE. sampling k placebos      (k = number treated units) nboots times, calculating      average treatment effect k placebos time.","code":""},{"path":"/reference/plac.dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the distribution of placebo samples for synthetic control \n    analysis with multiple treated units. — plac.dist","text":"","code":"plac.dist(multiple.synth, nboots = 500)  plac_dist(multiple.synth, nboots = 500)"},{"path":"/reference/plac.dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the distribution of placebo samples for synthetic control \n    analysis with multiple treated units. — plac.dist","text":"multiple.synth multiple.synth object returned function  multiple.synth nboots Number bootstrapped samples placebos take. Default 500. higher reliable inference.","code":""},{"path":"/reference/plac.dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the distribution of placebo samples for synthetic control \n    analysis with multiple treated units. — plac.dist","text":"p plot. att.t observed average treatment effect. df Dataframe row ATT one bootstrapped placebo     sample, used build distribution plot. p.value Proportion bootstrapped placebo samples ATTs extreme observed average treatment effect. Equivalent  p-value two-tailed test.","code":""},{"path":"/reference/plac.dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the distribution of placebo samples for synthetic control \n    analysis with multiple treated units. — plac.dist","text":"","code":"if (FALSE) { ## Using the toy data from Synth: library(Synth) data(synth.data) set.seed(42) ## Run the function similar to the dataprep() setup: multi <- multiple.synth(foo = synth.data,                        predictors = c(\"X1\", \"X2\", \"X3\"),                        predictors.op = \"mean\",                        dependent = \"Y\",                        unit.variable = \"unit.num\",                        time.variable = \"year\",                        treatment.time = 1990,                        special.predictors = list(                          list(\"Y\", 1991, \"mean\"),                          list(\"Y\", 1985, \"mean\"),                          list(\"Y\", 1980, \"mean\")                        ),                        treated.units = c(2,7),                        control.units = c(29, 13, 17, 32),                        time.predictors.prior = c(1984:1989),                        time.optimize.ssr = c(1984:1990),                        unit.names.variable = \"name\",                        time.plot = 1984:1996, gen.placebos = TRUE, Sigf.ipop = 2,                        strategy = 'multiprocess' )  ## Plot with the average path of the treated units and the average of their ## respective synthetic controls:  multi$p  ## Bootstrap the placebo units to get a distribution of placebo average ## treatment effects, and plot the distribution with a vertical line  ## indicating the actual ATT:  att.test <- plac.dist(multi) att.test$p }"},{"path":"/reference/plot_placebos.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot placebos of a synthetic control analysis — plot_placebos","title":"Function to plot placebos of a synthetic control analysis — plot_placebos","text":"Creates plots difference observed units      synthetic controls treated control units.      See Abadie, Diamond, Hainmueller (2011).","code":""},{"path":"/reference/plot_placebos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot placebos of a synthetic control analysis — plot_placebos","text":"","code":"plot_placebos(   tdf = tdf,   discard.extreme = FALSE,   mspe.limit = 20,   xlab = NULL,   ylab = NULL,   title = NULL,   alpha.placebos = 1,   ... )"},{"path":"/reference/plot_placebos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot placebos of a synthetic control analysis — plot_placebos","text":"tdf object list outcome values placebos,  constructed generate.placebos. discard.extreme Logical. Whether units high pre-treatement  MSPE excluded plot. Takes default FALSE. mspe.limit Numerical. Used discard.extreme TRUE.  indicates many times pre-treatment MSPE placebo  higher treated unit considered extreme  discarded. Default 20. xlab Character. Optional. Label x axis. ylab Character. Optional. Label y axis. title Character. Optional. Title plot. alpha.placebos transparency setting, default 1 ... optional arguments (currently used)","code":""},{"path":[]},{"path":"/reference/plot_placebos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to plot placebos of a synthetic control analysis — plot_placebos","text":"","code":"## Example with toy data from Synth library(Synth) # Load the simulated data data(synth.data)  # Execute dataprep to produce the necessary matrices for synth dataprep.out<-   dataprep(     foo = synth.data,     predictors = c(\"X1\"),     predictors.op = \"mean\",     dependent = \"Y\",     unit.variable = \"unit.num\",     time.variable = \"year\",     special.predictors = list(       list(\"Y\", 1991, \"mean\")     ),     treatment.identifier = 7,     controls.identifier = c(29, 2, 17),     time.predictors.prior = c(1984:1989),     time.optimize.ssr = c(1984:1990),     unit.names.variable = \"name\",     time.plot = 1984:1996 )  # run the synth command to create the synthetic control synth.out <- synth(dataprep.out, Sigf.ipop=1) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 31.03738  #>  #> solution.v: #>  0.2058833 0.7941167  #>  #> solution.w: #>  0.3616606 0.3220655 0.3147483  #>   tdf <- generate.placebos(dataprep.out,synth.out, Sigf.ipop = 1) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 25.21919  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.5127917 0.49214  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 212.8446  #>  #> solution.v: #>  0.99648 0.003519969  #>  #> solution.w: #>  0.4851494 0.5144103  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 94.81057  #>  #> solution.v: #>  1 0  #>  #> solution.w: #>  0.5059424 0.5518736  #>  #> New names: #> • `w.weight` -> `w.weight...1` #> • `w.weight` -> `w.weight...2` #> • `w.weight` -> `w.weight...3` ## Plot the gaps in outcome values over time of each unit -- ## treated and placebos -- to their synthetic controls  p <- plot_placebos(tdf,discard.extreme=TRUE, mspe.limit=10, xlab='Year') p   if (FALSE) ## Example with toy data from Synth library(Synth) # Load the simulated data data(synth.data)  # Execute dataprep to produce the necessary matrices for synth dataprep.out<-   dataprep(     foo = synth.data,     predictors = c(\"X1\"),     predictors.op = \"mean\",     dependent = \"Y\",     unit.variable = \"unit.num\",     time.variable = \"year\",     special.predictors = list(       list(\"Y\", 1991, \"mean\")     ),     treatment.identifier = 7,     controls.identifier = c(29, 2, 13, 17),     time.predictors.prior = c(1984:1989),     time.optimize.ssr = c(1984:1990),     unit.names.variable = \"name\",     time.plot = 1984:1996 )  # run the synth command to create the synthetic control synth.out <- synth(dataprep.out, Sigf.ipop=2) #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 19.33618  #>  #> solution.v: #>  0 1  #>  #> solution.w: #>  0.2559408 0.1232918 0.3053249 0.315439  #>   ## run the generate.placebos command to reassign treatment status ## to each unit listed as control, one at a time, and generate their ## synthetic versions. Sigf.ipop = 2 for faster computing time.  ## Increase to the default of 5 for better estimates.  tdf <- generate.placebos(dataprep.out,synth.out, Sigf.ipop = 2, strategy='multiprocess') #> Warning: Strategy 'multiprocess' is deprecated in future (>= 1.20.0). Instead, explicitly specify either 'multisession' or 'multicore'. In the current R session, 'multiprocess' equals 'multicore'. #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 89.19944  #>  #> solution.v: #>  0.02942986 0.9705701  #>  #> solution.w: #>  0.2112062 0.4493425 0.3394498  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 3209.434  #>  #> solution.v: #>  0 1  #>  #> solution.w: #>  0.9858452 0.00739644 0.006758148  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 357.7047  #>  #> solution.v: #>  8.2e-09 1  #>  #> solution.w: #>  0.1678859 0.03788081 0.7942333  #>  #>  #> X1, X0, Z1, Z0 all come directly from dataprep object. #>  #>  #> ****************  #>  searching for synthetic control unit   #>   #>  #> ****************  #> ****************  #> ****************  #>  #> MSPE (LOSS V): 91.49109  #>  #> solution.v: #>  0.6683888 0.3316112  #>  #> solution.w: #>  0.1545103 0.2152758 0.6299727  #>  #> New names: #> • `w.weight` -> `w.weight...1` #> • `w.weight` -> `w.weight...2` #> • `w.weight` -> `w.weight...3` #> • `w.weight` -> `w.weight...4`  ## Plot the gaps in outcome values over time of each unit -- ## treated and placebos -- to their synthetic controls  p <- plot_placebos(tdf,discard.extreme=TRUE, mspe.limit=10, xlab='Year') p"},{"path":"/reference/synth.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synth Data\nSynthetic data that can be used to explore SCtools. — synth.data","title":"Synth Data\nSynthetic data that can be used to explore SCtools. — synth.data","text":"Synth Data Synthetic data can used explore SCtools.","code":""},{"path":"/reference/synth.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synth Data\nSynthetic data that can be used to explore SCtools. — synth.data","text":"","code":"synth.data"},{"path":"/reference/synth.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synth Data\nSynthetic data that can be used to explore SCtools. — synth.data","text":"data.frame 168 rows 7 columns: unit.num experimental unit number year year name name experimental unit Y outcome interest X1 Covariate 1 X2 Covariate 2 X3 Covariate 3","code":""},{"path":"/news/index.html","id":"sctools-031","dir":"Changelog","previous_headings":"","what":"SCtools 0.3.1","title":"SCtools 0.3.1","text":"CRAN release: 2020-08-26 Changed plot_placebos vertical line treatment time instead first post-treatment time point Fixed p-value calculation plac_dist Minor fixes speed multiple.synth including enabling multiprocess","code":""},{"path":"/news/index.html","id":"sctools-030","dir":"Changelog","previous_headings":"","what":"SCtools 0.3.0","title":"SCtools 0.3.0","text":"CRAN release: 2019-12-12 Added NEWS.md file track changes package. plot.placebos changed plot_placebos avoid S3 conflicts","code":""}]
